{"version":3,"sources":["../../../projects/ng-file-validator-lib/src/lib/file-validator.service.ts","../../../projects/ng-file-validator-lib/src/lib/ng-file-validator-lib.module.ts"],"names":["FileCheck","ngFileValidator","allowedType","control","of","length","invalidMimeType","indexOf","fileTypeIndex","file","value","fileReader","FileReader","fileTye","Observable","create","observer","addEventListener","arr","Uint8Array","result","subarray","header","i","toString","includes","next","complete","readAsArrayBuffer","Injectable","NgModule","args","providers"],"mappings":"sVAMA,SAAAA,YAISA,EAAAC,gBAAP,SAAuBC,QAAA,IAAAA,IAAAA,EAAA,IAErB,OAAO,SAACC,GACN,GAA+B,iBAAnBA,EAAa,MACvB,OAAOC,EAAAA,GAAG,MAGZ,GAAIF,EAAYG,OAAS,EACvB,OAAOD,EAAAA,GAAG,CAAEE,iBAAiB,IAG/B,IAAoC,IAAhCJ,EAAYK,QAAQ,OAAe,CACrC,IAAMC,EAAgBN,EAAYK,QAAQ,OAC1CL,EAAYM,GAAiB,OAG/B,IAAMC,EAAON,EAAQO,MACfC,EAAa,IAAIC,WACnBC,EAAU,GAuCd,OAtCcC,EAAAA,WAAWC,QACvB,SAACC,GACCL,EAAWM,iBAAiB,WAAW,WAIrC,IAHA,IAAMC,EAAM,IAAIC,WAAWR,EAAWS,QAAuBC,SAAS,EAAG,GACrEC,EAAS,GAEJC,EAAI,EAAGA,EAAIL,EAAIb,OAAQkB,IAC9BD,GAAUJ,EAAIK,GAAGC,SAAS,IAE5B,OAAQF,GACN,IAAK,WACHT,EAAU,MACV,MACF,IAAK,WACL,IAAK,WACL,IAAK,WACL,IAAK,WACL,IAAK,WACHA,EAAU,OACV,MACF,IAAK,WACHA,EAAU,MACV,MACF,QAEEA,EAAU,SAGVX,EAAYuB,SAASZ,GACvBG,EAASU,KAAK,MAEdV,EAASU,KAAK,CAAEpB,iBAAiB,IAEnCU,EAASW,cAEXhB,EAAWiB,kBAAkBnB,iCA3DtCoB,EAAAA,mBCED,iCAHCC,EAAAA,SAAQC,KAAA,CAAC,CACRC,UAAW,CAAChC","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AbstractControl, AsyncValidatorFn } from \"@angular/forms\";\nimport { Observable, Observer, of } from \"rxjs\";\n\n\n@Injectable()\nexport class FileCheck {\n\n\n\n  static ngFileValidator(allowedType: String[] = []): AsyncValidatorFn {\n    let x = 10 + 1;\n    return (control: AbstractControl): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n      if (typeof (control.value) === 'string') {\n        return of(null);\n      }\n\n      if (allowedType.length < 1) {\n        return of({ invalidMimeType: true })\n      }\n\n      if (allowedType.indexOf('jpg') !== -1) {\n        const fileTypeIndex = allowedType.indexOf('jpg')\n        allowedType[fileTypeIndex] = 'jpeg'\n      }\n\n      const file = control.value as File;\n      const fileReader = new FileReader();\n      let fileTye = ''\n      const frObs = Observable.create(\n        (observer: Observer<{ [key: string]: any }>) => {\n          fileReader.addEventListener(\"loadend\", () => {\n            const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n            let header = \"\";\n\n            for (let i = 0; i < arr.length; i++) {\n              header += arr[i].toString(16);\n            }\n            switch (header) {\n              case \"89504e47\": //   type = \"image/png\";\n                fileTye = 'png'\n                break;\n              case \"ffd8ffe0\":\n              case \"ffd8ffe1\":\n              case \"ffd8ffe2\":\n              case \"ffd8ffe3\":\n              case \"ffd8ffe8\":\n                fileTye = 'jpeg'   //   type = \"image/jpeg\";\n                break;\n              case \"47494638\":\n                fileTye = 'gif'  //   type = \"image/gif\";\n                break;\n              default:\n\n                fileTye = 'others' // Or you can use the blob.type as fallback\n                break;\n            }\n            if (allowedType.includes(fileTye)) {\n              observer.next(null);\n            } else {\n              observer.next({ invalidMimeType: true });\n            }\n            observer.complete();\n          });\n          fileReader.readAsArrayBuffer(file);\n        }\n      );\n      return frObs;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FileCheck } from './file-validator.service';\n\n\n@NgModule({\n  providers: [FileCheck]\n})\nexport class NgFileValidatorLibModule { }\n"]}