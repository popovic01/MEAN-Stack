import { Injectable } from '@angular/core';
import { Observable, of } from "rxjs";
export class FileCheck {
    static ngFileValidator(allowedType = []) {
        let x = 10 + 1;
        return (control) => {
            if (typeof (control.value) === 'string') {
                return of(null);
            }
            if (allowedType.length < 1) {
                return of({ invalidMimeType: true });
            }
            if (allowedType.indexOf('jpg') !== -1) {
                const fileTypeIndex = allowedType.indexOf('jpg');
                allowedType[fileTypeIndex] = 'jpeg';
            }
            const file = control.value;
            const fileReader = new FileReader();
            let fileTye = '';
            const frObs = Observable.create((observer) => {
                fileReader.addEventListener("loadend", () => {
                    const arr = new Uint8Array(fileReader.result).subarray(0, 4);
                    let header = "";
                    for (let i = 0; i < arr.length; i++) {
                        header += arr[i].toString(16);
                    }
                    switch (header) {
                        case "89504e47": //   type = "image/png";
                            fileTye = 'png';
                            break;
                        case "ffd8ffe0":
                        case "ffd8ffe1":
                        case "ffd8ffe2":
                        case "ffd8ffe3":
                        case "ffd8ffe8":
                            fileTye = 'jpeg'; //   type = "image/jpeg";
                            break;
                        case "47494638":
                            fileTye = 'gif'; //   type = "image/gif";
                            break;
                        default:
                            fileTye = 'others'; // Or you can use the blob.type as fallback
                            break;
                    }
                    if (allowedType.includes(fileTye)) {
                        observer.next(null);
                    }
                    else {
                        observer.next({ invalidMimeType: true });
                    }
                    observer.complete();
                });
                fileReader.readAsArrayBuffer(file);
            });
            return frObs;
        };
    }
}
FileCheck.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS12YWxpZGF0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWZpbGUtdmFsaWRhdG9yLWxpYi9zcmMvbGliL2ZpbGUtdmFsaWRhdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsVUFBVSxFQUFZLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUloRCxNQUFNLE9BQU8sU0FBUztJQUlwQixNQUFNLENBQUMsZUFBZSxDQUFDLGNBQXdCLEVBQUU7UUFDL0MsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNmLE9BQU8sQ0FBQyxPQUF3QixFQUF3RSxFQUFFO1lBQ3hHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxRQUFRLEVBQUU7Z0JBQ3ZDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2pCO1lBRUQsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDMUIsT0FBTyxFQUFFLENBQUMsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTthQUNyQztZQUVELElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDckMsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtnQkFDaEQsV0FBVyxDQUFDLGFBQWEsQ0FBQyxHQUFHLE1BQU0sQ0FBQTthQUNwQztZQUVELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFhLENBQUM7WUFDbkMsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUNwQyxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUE7WUFDaEIsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FDN0IsQ0FBQyxRQUEwQyxFQUFFLEVBQUU7Z0JBQzdDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO29CQUMxQyxNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBcUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQzVFLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztvQkFFaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7d0JBQ25DLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO3FCQUMvQjtvQkFDRCxRQUFRLE1BQU0sRUFBRTt3QkFDZCxLQUFLLFVBQVUsRUFBRSx3QkFBd0I7NEJBQ3ZDLE9BQU8sR0FBRyxLQUFLLENBQUE7NEJBQ2YsTUFBTTt3QkFDUixLQUFLLFVBQVUsQ0FBQzt3QkFDaEIsS0FBSyxVQUFVLENBQUM7d0JBQ2hCLEtBQUssVUFBVSxDQUFDO3dCQUNoQixLQUFLLFVBQVUsQ0FBQzt3QkFDaEIsS0FBSyxVQUFVOzRCQUNiLE9BQU8sR0FBRyxNQUFNLENBQUEsQ0FBRyx5QkFBeUI7NEJBQzVDLE1BQU07d0JBQ1IsS0FBSyxVQUFVOzRCQUNiLE9BQU8sR0FBRyxLQUFLLENBQUEsQ0FBRSx3QkFBd0I7NEJBQ3pDLE1BQU07d0JBQ1I7NEJBRUUsT0FBTyxHQUFHLFFBQVEsQ0FBQSxDQUFDLDJDQUEyQzs0QkFDOUQsTUFBTTtxQkFDVDtvQkFDRCxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7d0JBQ2pDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7cUJBQ3JCO3lCQUFNO3dCQUNMLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztxQkFDMUM7b0JBQ0QsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUN0QixDQUFDLENBQUMsQ0FBQztnQkFDSCxVQUFVLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckMsQ0FBQyxDQUNGLENBQUM7WUFDRixPQUFPLEtBQUssQ0FBQztRQUNmLENBQUMsQ0FBQTtJQUNILENBQUM7OztZQWhFRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBBc3luY1ZhbGlkYXRvckZuIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBPYnNlcnZlciwgb2YgfSBmcm9tIFwicnhqc1wiO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGaWxlQ2hlY2sge1xuXG5cblxuICBzdGF0aWMgbmdGaWxlVmFsaWRhdG9yKGFsbG93ZWRUeXBlOiBTdHJpbmdbXSA9IFtdKTogQXN5bmNWYWxpZGF0b3JGbiB7XG4gICAgbGV0IHggPSAxMCArIDE7XG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBQcm9taXNlPHsgW2tleTogc3RyaW5nXTogYW55IH0+IHwgT2JzZXJ2YWJsZTx7IFtrZXk6IHN0cmluZ106IGFueSB9PiA9PiB7XG4gICAgICBpZiAodHlwZW9mIChjb250cm9sLnZhbHVlKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG9mKG51bGwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWxsb3dlZFR5cGUubGVuZ3RoIDwgMSkge1xuICAgICAgICByZXR1cm4gb2YoeyBpbnZhbGlkTWltZVR5cGU6IHRydWUgfSlcbiAgICAgIH1cblxuICAgICAgaWYgKGFsbG93ZWRUeXBlLmluZGV4T2YoJ2pwZycpICE9PSAtMSkge1xuICAgICAgICBjb25zdCBmaWxlVHlwZUluZGV4ID0gYWxsb3dlZFR5cGUuaW5kZXhPZignanBnJylcbiAgICAgICAgYWxsb3dlZFR5cGVbZmlsZVR5cGVJbmRleF0gPSAnanBlZydcbiAgICAgIH1cblxuICAgICAgY29uc3QgZmlsZSA9IGNvbnRyb2wudmFsdWUgYXMgRmlsZTtcbiAgICAgIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgbGV0IGZpbGVUeWUgPSAnJ1xuICAgICAgY29uc3QgZnJPYnMgPSBPYnNlcnZhYmxlLmNyZWF0ZShcbiAgICAgICAgKG9ic2VydmVyOiBPYnNlcnZlcjx7IFtrZXk6IHN0cmluZ106IGFueSB9PikgPT4ge1xuICAgICAgICAgIGZpbGVSZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlbmRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoZmlsZVJlYWRlci5yZXN1bHQgYXMgQXJyYXlCdWZmZXIpLnN1YmFycmF5KDAsIDQpO1xuICAgICAgICAgICAgbGV0IGhlYWRlciA9IFwiXCI7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGhlYWRlciArPSBhcnJbaV0udG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChoZWFkZXIpIHtcbiAgICAgICAgICAgICAgY2FzZSBcIjg5NTA0ZTQ3XCI6IC8vICAgdHlwZSA9IFwiaW1hZ2UvcG5nXCI7XG4gICAgICAgICAgICAgICAgZmlsZVR5ZSA9ICdwbmcnXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJmZmQ4ZmZlMFwiOlxuICAgICAgICAgICAgICBjYXNlIFwiZmZkOGZmZTFcIjpcbiAgICAgICAgICAgICAgY2FzZSBcImZmZDhmZmUyXCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJmZmQ4ZmZlM1wiOlxuICAgICAgICAgICAgICBjYXNlIFwiZmZkOGZmZThcIjpcbiAgICAgICAgICAgICAgICBmaWxlVHllID0gJ2pwZWcnICAgLy8gICB0eXBlID0gXCJpbWFnZS9qcGVnXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCI0NzQ5NDYzOFwiOlxuICAgICAgICAgICAgICAgIGZpbGVUeWUgPSAnZ2lmJyAgLy8gICB0eXBlID0gXCJpbWFnZS9naWZcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcblxuICAgICAgICAgICAgICAgIGZpbGVUeWUgPSAnb3RoZXJzJyAvLyBPciB5b3UgY2FuIHVzZSB0aGUgYmxvYi50eXBlIGFzIGZhbGxiYWNrXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWxsb3dlZFR5cGUuaW5jbHVkZXMoZmlsZVR5ZSkpIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChudWxsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoeyBpbnZhbGlkTWltZVR5cGU6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICByZXR1cm4gZnJPYnM7XG4gICAgfVxuICB9XG59XG4iXX0=