import { Observable } from 'rxjs';
import { ConfirmAcssDebitPaymentData, ConfirmAcssDebitPaymentOptions, ConfirmAfterpayClearpayPaymentData, ConfirmAfterpayClearpayPaymentOptions, ConfirmAlipayPaymentData, ConfirmAlipayPaymentOptions, ConfirmAuBecsDebitPaymentData, ConfirmAuBecsDebitSetupData, ConfirmBancontactPaymentData, ConfirmBancontactPaymentOptions, ConfirmCardPaymentData, ConfirmCardPaymentOptions, ConfirmEpsPaymentData, ConfirmEpsPaymentOptions, ConfirmFpxPaymentData, ConfirmFpxPaymentOptions, ConfirmGiropayPaymentData, ConfirmGiropayPaymentOptions, ConfirmGrabPayPaymentData, ConfirmGrabPayPaymentOptions, ConfirmIdealPaymentData, ConfirmIdealPaymentOptions, ConfirmKlarnaPaymentData, ConfirmKlarnaPaymentOptions, ConfirmOxxoPaymentData, ConfirmOxxoPaymentOptions, ConfirmP24PaymentData, ConfirmP24PaymentOptions, ConfirmCardSetupData, ConfirmCardSetupOptions, ConfirmSepaDebitPaymentData, ConfirmSofortPaymentData, ConfirmWechatPayPaymentData, ConfirmWechatPayPaymentOptions, ConfirmSepaDebitSetupData, CreatePaymentMethodData, VerifyMicrodepositsForPaymentData, ConfirmAcssDebitSetupData, ConfirmAcssDebitSetupOptions, CreateSourceData, CreateTokenIbanData, CreateTokenCardData, CreateTokenPiiData, CreateTokenBankAccountData, PaymentIntent, PaymentMethod, PaymentRequest, PaymentRequestOptions, RedirectToCheckoutOptions, RetrieveSourceParam, SetupIntent, Stripe, StripeCardElement, StripeCardNumberElement, StripeCardCvcElement, StripeConstructorOptions, StripeElements, StripeElementsOptions, StripeElement, StripeError, StripeIbanElement, Source, Token, TokenCreateParams, ConfirmBacsDebitSetupData, ConfirmBancontactSetupData, ConfirmIdealSetupData, ConfirmSofortSetupData, VerifyMicrodepositsForSetupData } from '@stripe/stripe-js';
import { StripeServiceInterface, VerificationSessionResult } from '../interfaces/stripe-instance.interface';
import { WindowRef } from './window-ref.service';
import { LazyStripeAPILoader } from './api-loader.service';
import { StripeInstance } from './stripe-instance.class';
export declare class StripeService implements StripeServiceInterface {
    version: string;
    key: string;
    options: StripeConstructorOptions;
    loader: LazyStripeAPILoader;
    window: WindowRef;
    stripe: StripeInstance;
    constructor(version: string, key: string, options: StripeConstructorOptions, loader: LazyStripeAPILoader, window: WindowRef);
    getStripeReference(): Observable<any>;
    getInstance(): Stripe | undefined;
    setKey(key: string, options?: StripeConstructorOptions): StripeInstance;
    changeKey(key: string, options?: StripeConstructorOptions): StripeInstance;
    elements(options?: StripeElementsOptions): Observable<StripeElements>;
    redirectToCheckout(options?: RedirectToCheckoutOptions): Observable<never | {
        error: StripeError;
    }>;
    confirmAcssDebitPayment(clientSecret: string, data?: ConfirmAcssDebitPaymentData, options?: ConfirmAcssDebitPaymentOptions): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmAfterpayClearpayPayment(clientSecret: string, data?: ConfirmAfterpayClearpayPaymentData, options?: ConfirmAfterpayClearpayPaymentOptions): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmAlipayPayment(clientSecret: string, data?: ConfirmAlipayPaymentData, options?: ConfirmAlipayPaymentOptions): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmAuBecsDebitPayment(clientSecret: string, data?: ConfirmAuBecsDebitPaymentData): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmBancontactPayment(clientSecret: string, data?: ConfirmBancontactPaymentData, options?: ConfirmBancontactPaymentOptions): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmCardPayment(clientSecret: string, data?: ConfirmCardPaymentData, options?: ConfirmCardPaymentOptions): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmEpsPayment(clientSecret: string, data?: ConfirmEpsPaymentData, options?: ConfirmEpsPaymentOptions): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmFpxPayment(clientSecret: string, data?: ConfirmFpxPaymentData, options?: ConfirmFpxPaymentOptions): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmGiropayPayment(clientSecret: string, data?: ConfirmGiropayPaymentData, options?: ConfirmGiropayPaymentOptions): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmGrabPayPayment(clientSecret: string, data?: ConfirmGrabPayPaymentData, options?: ConfirmGrabPayPaymentOptions): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmIdealPayment(clientSecret: string, data?: ConfirmIdealPaymentData, options?: ConfirmIdealPaymentOptions): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmKlarnaPayment(clientSecret: string, data?: ConfirmKlarnaPaymentData, options?: ConfirmKlarnaPaymentOptions): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmOxxoPayment(clientSecret: string, data?: ConfirmOxxoPaymentData, options?: ConfirmOxxoPaymentOptions): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmP24Payment(clientSecret: string, data?: ConfirmP24PaymentData, options?: ConfirmP24PaymentOptions): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmSepaDebitPayment(clientSecret: string, data?: ConfirmSepaDebitPaymentData): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmSofortPayment(clientSecret: string, data?: ConfirmSofortPaymentData): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmWechatPayPayment(clientSecret: string, data?: ConfirmWechatPayPaymentData, options?: ConfirmWechatPayPaymentOptions): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    handleCardAction(clientSecret: string): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    verifyMicrodepositsForPayment(clientSecret: string, data?: VerifyMicrodepositsForPaymentData): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    createPaymentMethod(paymentMethodData: CreatePaymentMethodData): Observable<{
        paymentMethod?: PaymentMethod;
        error?: StripeError;
    }>;
    retrievePaymentIntent(clientSecret: string): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    confirmAcssDebitSetup(clientSecret: string, data?: ConfirmAcssDebitSetupData, options?: ConfirmAcssDebitSetupOptions): Observable<{
        setupIntent?: SetupIntent;
        error?: StripeError;
    }>;
    confirmAuBecsDebitSetup(clientSecret: string, data?: ConfirmAuBecsDebitSetupData): Observable<{
        setupIntent?: SetupIntent;
        error?: StripeError;
    }>;
    confirmBacsDebitSetup(clientSecret: string, data?: ConfirmBacsDebitSetupData): Observable<{
        setupIntent?: SetupIntent;
        error?: StripeError;
    }>;
    confirmBancontactSetup(clientSecret: string, data?: ConfirmBancontactSetupData): Observable<{
        setupIntent?: SetupIntent;
        error?: StripeError;
    }>;
    confirmCardSetup(clientSecret: string, data?: ConfirmCardSetupData, options?: ConfirmCardSetupOptions): Observable<{
        setupIntent?: SetupIntent;
        error?: StripeError;
    }>;
    confirmIdealSetup(clientSecret: string, data?: ConfirmIdealSetupData): Observable<{
        setupIntent?: SetupIntent;
        error?: StripeError;
    }>;
    confirmSepaDebitSetup(clientSecret: string, data?: ConfirmSepaDebitSetupData): Observable<{
        setupIntent?: SetupIntent;
        error?: StripeError;
    }>;
    confirmSofortSetup(clientSecret: string, data?: ConfirmSofortSetupData): Observable<{
        setupIntent?: SetupIntent;
        error?: StripeError;
    }>;
    verifyMicrodepositsForSetup(clientSecret: string, data?: VerifyMicrodepositsForSetupData): Observable<{
        setupIntent?: SetupIntent;
        error?: StripeError;
    }>;
    retrieveSetupIntent(clientSecret: string): Observable<{
        setupIntent?: SetupIntent;
        error?: StripeError;
    }>;
    paymentRequest(options: PaymentRequestOptions): PaymentRequest | undefined;
    createToken(tokenType: StripeIbanElement, data: CreateTokenIbanData): Observable<{
        token?: Token;
        error?: StripeError;
    }>;
    createToken(tokenType: StripeCardElement | StripeCardNumberElement, data?: CreateTokenCardData): Observable<{
        token?: Token;
        error?: StripeError;
    }>;
    createToken(tokenType: 'pii', data: CreateTokenPiiData): Observable<{
        token?: Token;
        error?: StripeError;
    }>;
    createToken(tokenType: 'bank_account', data: CreateTokenBankAccountData): Observable<{
        token?: Token;
        error?: StripeError;
    }>;
    createToken(tokenType: 'cvc_update', element?: StripeCardCvcElement): Observable<{
        token?: Token;
        error?: StripeError;
    }>;
    createToken(tokenType: 'account', data: TokenCreateParams.Account): Observable<{
        token?: Token;
        error?: StripeError;
    }>;
    createToken(tokenType: 'person', data: TokenCreateParams.Person): Observable<{
        token?: Token;
        error?: StripeError;
    }>;
    createSource(element: StripeElement, sourceData: CreateSourceData): Observable<{
        source?: Source;
        error?: StripeError;
    }>;
    createSource(sourceData: CreateSourceData): Observable<{
        source?: Source;
        error?: StripeError;
    }>;
    retrieveSource(source: RetrieveSourceParam): Observable<{
        source?: Source;
        error?: StripeError;
    }>;
    verifyIdentity(clientSecret: string): Observable<VerificationSessionResult>;
    /**
     * @deprecated
     */
    handleCardPayment(clientSecret: string, element?: any, data?: any): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    /**
     * @deprecated
     */
    confirmPaymentIntent(clientSecret: string, element?: any, data?: any): Observable<{
        paymentIntent?: PaymentIntent;
        error?: StripeError;
    }>;
    /**
     * @deprecated
     */
    handleCardSetup(clientSecret: string, element?: any, data?: any): Observable<{
        setupIntent?: SetupIntent;
        error?: StripeError;
    }>;
    /**
     * @deprecated
     */
    confirmSetupIntent(clientSecret: string, element?: any, data?: any): Observable<{
        setupIntent?: SetupIntent;
        error?: StripeError;
    }>;
    /**
     * @deprecated
     */
    handleFpxPayment(clientSecret: string, element?: any, data?: any): Observable<{
        setupIntent?: SetupIntent;
        error?: StripeError;
    }>;
}
